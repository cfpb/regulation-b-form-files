%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Formulario C-1- Ejemplo de Modelo de Acciones Tomadas y Declaracio\314\201n de Razones.pdf)
%%Creator: (Adobe Acrobat 21.7.0)
%%For: tylert
%%CreationDate: 12/1/21, 4:01 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 835 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2021-12-01T16:00:55-05:00"
   xmp:CreateDate="2021-12-01T16:00:44-05:00"
   xmp:MetadataDate="2021-12-01T16:00:55-05:00"
   xmp:CreatorTool="Adobe InDesign 16.4 (Macintosh)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:cfc539d7-65fc-f948-bd0e-366d0cdbd25e"
   xmpMM:InstanceID="uuid:e6f6f427-36f4-0642-9dc7-cd629e657e1a"
   pdf:Producer="Adobe PDF Library 16.0"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
36 118.38 mo
576 118.38 li
true sop
/0 
<<
/Names [
(Cyan)
(Magenta)
(Yellow)
(Black)
]
/CSA /0 get_csa_by_name
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/TintTransform
/0 {

} bind /Procedure add_res
/0 /Procedure get_res
>>
/CSD add_res
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
@
%ADOBeginSubsetFont: FAAAAA+AvenirNext-DemiBold Initial
ct_T42Dict begin
-0.461 -0.457 1.418 1.203
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+AvenirNext-DemiBold
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000001c6670676d000000000000014800000173
676c796652b5b87b00002c3c00002c7868656164f8c32bd8000002bc0000
00366868656100000000000002f400000024686d74780000000000000318
0000128c6c6f636100c260fc000015a4000012906d617870000000000000
2834000000206e616d65bd91e94300002854000003627072657000000000
00002bb80000008467646972000000000000000000000000000301ce0258
0005000402bc028a0000008c02bc028a000001dd003200fa0000020b0703
0202020202048000002f5000204a00000000000000004c494e4f0020000d
fb0203e8fe92000003e8016e0000009b0000000001f202c4002000200004
0014004e006400900078009000000012ff10000001e0000e02c40012b800
002c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
00012c2020456944b001602db800022cb800012a212db800032c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800042c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800052c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800062c2020456944b001
602020457d691844b001602db800072cb800062a2db800082c4b20b00326
5358b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326
53582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800092c4b
535845441b2121592d000001000000020000f5a554d05f0f3cf5001903e8
00000000c05a9a7400000000d57c4d92fe31fe35058d04b6000000090002
0001000000000001000003e8fe92000005dbfe31fee9058d000100000000
0000000000000000000004a30200000001f400000000000000fa00000154
005a01cb005a0250002f0262002903a2002802e50030011a005a014a0024
014a004001cf001c029a003e0104001801400028010400320185fff70262
003702620045026200400262001f02620015026200270262002d02620033
0262003a0262002f012c0046012c0028029a0050029a0050029a00500207
00300320002002c2fff80287004e02b8002c02fc004e0262004e023d004e
0305002c02e3004e011a004e01f2000502b1004e01ff004e0398004e030c
004e0351002c0262004e035400250275004e023e00190238000402ca0048
028dfff603ec000602920004026effef02630023014a003c01850003014a
004e029a004501f400000104ffc602260026027b004a01e8002c027a002b
023e002c014400000278002c0248004a010c0039010cffde021f004a010c
004a037a0048024600480262002c027900480278002b016c004801bc000f
015400030246004402010000032400040219ffff0201000001e20022014a
000a00de003c014a0032029a004800fa00000154005a0262004e02620042
026200150262001000de003c026200440104ffd803200014017c00310207
001e029a003e01400028025800480104ffe201900028029a005001900034
0190002801040053023e00440258001f010400320104000b0190002a017c
0026020700260384002a0384002a038400280207001d02c2fff802c2fff8
02c2fff802c2fff802c2fff802c2fff80416fffa02b8002c0262004e0262
004e0262004e0262004e011affe0011a004e011affd6011affe302fc000d
030c004e0351002c0351002c0351002c0351002c0351002c029a004d0351
002c02ca004802ca004802ca004802ca0048026effef0262004e02730048
0226002602260026022600260226002602260026022600260377002601e8
002c023e002c023e002c023e002c023e002c010cffd6010c004a010cffd1
010cffdd0262002c024600480262002c0262002c0262002c0262002c0262
002c029a0050026200240246004402460044024600440246004402010000
027b004a0201000002c2fff80226002602c2fff80226002602c2fff80226
002602b8002c01e8002c02b8002c01e8002c02b8002c01e8002c02b8002c
01e8002c02fc004e027a002b02fc000d027a002b0262004e023e002c0262
004e023e002c0262004e023e002c0262004e023e002c0262004e023e002c
0305002c0278002c0305002c0278002c0305002c0278002c0305002c0278
002c02e3004e0248004a02e3004e02480014011affd5010cffd0011affed
010cffe8011a0025010c0015011a003f010c004a0302004e0218003901f2
0005010cffd002b1004e021f004a01ff004e010c004a01ff004e010c001d
01ff004e010c004a01ff004e0187004a01ff0008010c0005030c004e0246
0048030c004e02460048030c004e02460048026effe90351002c0262002c
0351002c0262002c0351002c0262002c0403002c03bf002c0275004e016c
00480275004e016c001c0275004e016c001d023e001901bc000f023e0019
01bc000f023e001901bc000f023e001901bc000f02380004015400030238
000401540003023800040154000302ca00480246004402ca004802460044
02ca00480246004402ca00480246004402ca00480246004402ca00480246
004403ec000603240004026effef02010000026effef0263002301e20022
0263002301e200220263002301e200220262fffc023e001901bc000f0238
0004015400030104ffcc0104ffcd0104ffe20104ffd80104003601040019
0104ffff0104ffca0104ffec0190001e0258001e010e002a010e002a010e
002a01d1002a01d1002a01d1002a02ad000802f7002e023e00440251000b
025100290251002f01f4004903e8005704ce00270128001e012800260064
ff2a0262000f01f4002003e8002802f7002e0320003c022c002802ad0008
02e5003e02880019029a003e0064ff2a010400320219fff4032f002d0263
005b029a003f029a0050029a0050029a005002510045010cffde0104002b
02510000036c006801f4004c02040034017c00160204000601b7002d0243
002302d50026020400360134004c02040032020400430204004102040032
02040023020400370204003402040045020400380204003502c2003901aa
001f02310035022f0048025e0026022a0049027100390222002b0265003b
0271003902510000020400140204003c02040008041b002601b7002b0134
004c0246fffe021d004c0235002c026f004c01fc004c01e4004c0267002c
026b004c0112004c019500000239004c01b1004c02ea004c027a004c02ac
002c01f4004c02a7002c0211004c01ec001601be0004025300460210fffc
033a0006020c000001fefff8020b00320246fffe0246fffe0246fffe0246
fffe0246fffe0359fffc0246fffe0246fffe0246fffe0246fffe0235002c
0235002c0235002c0235002c0235002c026f004c026f000901fc004c01fc
004c01fc004c01fc004c01fc004c01fc004c01fc004c01fc004c01fc004c
0267002c0267002c0267002c0267002c026b004c026b004c011200250112
004c0112ffd3011200360112ffd40112ffe00112ffeb0112ffda01950000
0239004c01b1000a01b1004c01b1004c01b1004c01b1004c027a004c027a
004c027a004c027a004c02ac002c02ac002c02ac002c02ac002c02ac002c
02ac002c02ac002c02ac002c02ac002c0211004c0211004c0211004c01ec
001601ec001601ec001601ec001601ec001603d8001601be000401be0004
01be00040253004602530046025300460253004602530046025300460253
0046025300460253004602530046033a000601fefff801fefff801fefff8
020b0032020b0032020b003202ae004c02f6004c0395004c0333002e026f
00090104ffcc0104ffcd0104ffca0104ffd80104ffe20104ffd801040019
0104ffec010400360104ffc6010400530104ffec010400360104ffcd0104
ffca0104ffd80104ffe20104ffd8010400190104ffdd0104003c0104ffcc
010400430104002e0351002c0270002c02d40048025a00440104000a012c
00280287004e027b004a02fc004e027a002b023d004e0144000002e3004e
0248004a0262004e02790048023e001901bc000f023800040154000302c2
fff80226002602c2fff80226002602c2fff80226002602c2fff80226ffd2
02c2fff80226002602c2fff80226002602c2fff80226002602c2fff80226
002602c2fff80226002602c2fff80226002602c2fff80226002602c2fff8
022600260262004e023e002c0262004e023e002c0262004e023e002c0262
004e023e002c0262fffd023effee0262004e023e002c0262004e023e002c
0262004e023e002c011a0015010c000e011a0041010c00390351002c0262
002c0351002c0262002c0351002c0262002c0351002c0262fff10351002c
0262002c0351002c0262002c0351002c0262002c0351002c0270002c0351
002c0270002c0351002c0270002c0351002c0270002c0351002c0270002c
02ca00480246004402ca00480246004402d40048025a004402d40048025a
004402d40048025a004402d40048025a004402d40048025a0044026effef
02010000010e002a027a002b01040032010400360000fefc0000fefc0000
fefc0000fefc0000fefc0000fefc0000fefc0000fefc0000fefc0000fefc
0000fefc0000fe310000feac0000fe9d0000fefc0000fefc0000fefc0000
fefc0000fefc0000fefc0000fefc0000fefc0000fefc0000fefc00de003c
01bc003c000000000000000000000000000000000448002803cd002802b1
004e02c2fff8011a004e0234004e034e004e03a7004e028dfff603a7fff6
04c1fff605dbfff603ac004e0292000403ac000404c6000401ff004e02b8
002c02fc004e0398004e010c00390218003903240039030d003902010000
030d00000419000005250000032500390219ffff0325ffff0431ffff010c
004a01e8002c027a002b037a0048011affe3010cffdc0154005a057e004e
04f0004e0466002b03f1004e030b004e0218004a04fe004e0418004e0352
004802c2fff802260026011affd8010cffd10351002c0262002c02ca0048
0246004402ca00480246004402ca00480246004402ca00480246004402ca
00480246004402c2fff80226002602c2fff8022600260416fffa03770026
0305002c0278002c02b1004e021f004a0351002c0262002c0351002c0262
002c055f004e04de004e045c002b0305002c0278002c030c004e02460048
02c2fff8022600260416fffa037700260351002c0262002402c2fff80226
002602c2fff8022600260262004e023e002c0262004e023e002c011affb2
010cffab011affe3010cffdc0351002c0262002c0351002c0262002c0275
004e016cfffc0275004e016c002d02ca00480246004402ca004802460044
02e3004e0248004a02c2fff8022600260262004e023e002c0351002c0262
002c0351002c0262002c0351002c0262002c0351002c0262002c026effef
02010000010e002a010e002a01d1002a011a004e02c2fff8022600260287
004e027b004a0287004e027b004a02b8002c01e8002c02fc004e027a002b
02fc004e027a002b02fc004e027a002b02fc004e027a002b0262004e023e
002c0262004e023e002c0262004e023e002c0262004e023e002c0262004e
023e002c0305002c0278002c02e3004e0248004a02e3004e0248004a02e3
000b0248000b02e3004e0248004a011affd5010cffce011affe3010cffdc
02b1004e021f004a02b1004e021f004a02b1004e021f004a01ff004e010c
003901ff004e010cffe601ff004e010cffe601ff004e010cffd00398004e
037a00480398004e037a00480398004e037a0048030c004e02460048030c
004e02460048030c004e02460048030c004e024600480351002c0262002c
0351002c0262002c0351002c0262002c0351002c0262002c0262004e0279
00480275004e016c00480275004e016c00480275004e016c00370275004e
016c0037023e001901bc000f023e001901bc000f023e001901bc000f023e
001901bc000f02380004015400030238000401540003023800040154ffee
02ca00480246004402ca00480246004402ca00480246004402ca00480246
004402ca004802460044028dfff602010000028dfff60201000003ec0006
0324000403ec00060324000403ec00060324000403ec00060324000403ec
000603240004029200040219ffff029200040219ffff026effef02010000
0263002301e200220263002301e200220263002301e200220248004a0154
fffa0324000402010000026effef02010000026effef02010000026effef
020100000262004e023e002c0262004e023e002c0416fffa037700260000
fefc0000fefc0000fefc0104ffd80104003202c2fff80226002602260026
011affed010cffe6010c001102ca0048024600440219ffff0398004e037a
00480275004e016c002d02d40048025a004401040018012c0046012c0028
0154005a0207003003e801a7025800fe0190009a01f400d401f400d4014a
fee9014afee9014afee9014afee9014afee9014afee90258005302d30008
0216005302ca002f0243001f01230053012fffef0200000a03c9000803fc
005302db000802bf0053028a000b02d9005302ccfffd02830053028c0053
0216005302dcfffd0258005303e4001f026e002c031300530312005302bf
005302e40009039b005302e700530353002f02d400530264005302c3002f
02400008028a000b0382002d02a6000402f300530289003603e700530417
005302c20008033800530267005302cc001504670053029c00160227002b
026700370233004a019d004a026800030249002f035a002401e100150280
004a0280004a023a004a025f002102d1004a0259004a026f002f0251004a
0287004c01f6002f01ca000f0213000702c7002f021f0006025e004a0234
002d034d004a0349004a0257000f02e4004a021d004a02290024034c004a
0216001c023c0038025ffffb01a6004a0233003301e30026011300410113
ffe00115ffe0034700140363004a025cfffb023a004a02130007024f004a
0212004701ab004a0486005e03cb0004030efffd02b4fffd0104005000f0
ffaa02d9000a02ad0000033500000176000003930000031b0000035fffff
017ffff502ccfffd028c00530205005302e4002802580053025e002302e7
00530353002f0123005302a1005302cc0004039b0053030a0053024f002b
0353002f02d40053026400530262003902400008027efff50382002d02a6
000403650045031000240123ffe6027efff5027e002b021200250261004a
0101004202570048027e002b0287004c02420007026e003002120025020e
002f025f004a027c003701060047023f004b022f0010026b004a02130007
0207002f026f002f0255004a0286004c020e002f0287002f01d800060257
0047033d002f02450006033b0041032c002b0113ffe002580065026f002f
02580048032c002b0224000f0259000302e7001600000000000000d40000
00d4000000d4000000d4000000d4000000d4000000d4000000d4000000d4
000000d4000000d4000001280000018c0000018c0000018c000001c40000
01f40000027c0000027c0000027c000002d8000002d8000002d8000002d8
000003dc00000528000005a400000780000007800000086c0000086c0000
086c0000086c0000086c0000086c0000086c000008e4000008e4000009d4
00000aa000000b2400000b9800000b9800000c5400000c9c00000c9c0000
0c9c00000c9c00000d9400000d9400000d9400000d9400000d9400000ea4
000010000000106400001064000010640000106400001064000010640000
1064000010640000106400001064000010640000106400001064000011d4
0000134c00001434000015b0000016cc0000178c0000198400001a740000
1b4000001c6400001c6400001c9c00001e2800001f440000207000002208
000023a000002474000025c0000026980000279800002800000028000000
288c00002950000029b8000029b8000029b8000029b8000029b8000029b8
000029b8000029b8000029b8000029b8000029b8000029b8000029b80000
29b8000029b8000029b8000029b8000029b8000029b8000029b8000029b8
000029b8000029b8000029b8000029b8000029b8000029b8000029b80000
29b8000029b8000029b8000029b8000029b8000029b8000029b8000029b8
000029b8000029b8000029b8000029b8000029b8000029b8000029b80000
29b8000029b8000029b8000029b8000029b8000029b8000029b8000029b8
000029b8000029b8000029b8000029b8000029b8000029b8000029b80000
29b8000029b8000029b8000029b8000029b8000029b8000029b8000029b8
000029b8000029b8000029b8000029b8000029b8000029b8000029b80000
29b8000029b8000029b8000029b8000029b800002b1000002b1000002b10
00002b1000002b1000002b1000002b1000002b1000002b1000002b100000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c7800002c7800002c7800002c7800002c7800002c7800002c7800002c78
00002c7800002c7800002c7800002c7800002c7800002c7800002c780000
2c780001000004a3006c0007005e0007000100000000000a0000020001f0
000400010000000a007e0001000000000003001a00000001000000000004
001a001a0001000000000006001a00340003000104090000009a004e0003
000104090001003400e80003000104090002000e011c0003000104090003
0034012a00030001040900040034015e0003000104090006003401920003
000104090007011e01c65a53465550542b4176656e69724e6578742d4465
6d69426f6c645a53465550542b4176656e69724e6578742d44656d69426f
6c645a53465550542b4176656e69724e6578742d44656d69426f6c640043
006f0070007900720069006700680074002000a900200032003000300034
0020002d002000320030003000370020004c0069006e006f007400790070
006500200047006d00620048002c0020007700770077002e006c0069006e
006f0074007900700065002e0063006f006d002e00200041006c006c0020
007200690067006800740073002000720065007300650072007600650064
002e005a00530046005500500054002b004100760065006e00690072004e
006500780074002d00440065006d00690042006f006c0064005200650067
0075006c00610072005a00530046005500500054002b004100760065006e
00690072004e006500780074002d00440065006d00690042006f006c0064
005a00530046005500500054002b004100760065006e00690072004e0065
00780074002d00440065006d00690042006f006c0064005a005300460055
00500054002b004100760065006e00690072004e006500780074002d0044
0065006d00690042006f006c0064004100760065006e0069007200200069
007300200061002000740072006100640065006d00610072006b0020006f
00660020004c0069006e006f007400790070006500200047006d00620048
0020007200650067006900730074006500720065006400200069006e0020
00740068006500200055002e0053002e00200050006100740065006e0074
00200061006e0064002000540072006100640065006d00610072006b0020
004f0066006600690063006500200061006e00640020006d006100790020
006200650020007200650067006900730074006500720065006400200069
006e0020006300650072007400610069006e0020006f0074006800650072
0020006a007500720069007300640069006300740069006f006e0073002e
0000b800002b00ba0001000300022b01ba0004000200022b01bf0004002e
0022001b0013000d000000082bbf000500270022001b0013000d00000008
2b00bf00010047003a002d001d0014000000082bbf00020037002d002300
1d000d000000082bbf000300270022001b0013000d000000082b00ba0006
000400072bb8000020457d69184400>
[11385 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 452 16 <0001002800c30118012900030017bb00000005000100042b00bb00030002
000000042b3031252335330118f0f0c36600>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 636 20 <000100450000018f02c400060039bb00040004000000042b00b800004558
b800032f1bb90003000c3e59b800004558b800052f1bb9000500063e59ba
00000005000311123930310107273733112301178c46dd6d7802327353b2
fd3c>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 1920 29 <00020046fffa00e601e6000d001b0096bb00060005000000042b41090006
000600160006002600060036000600045db8000010b8000ed0b8000610b8
0014d0b8000610b8001ddc00b800004558b800112f1bb90011000a3e59b8
00004558b800092f1bb9000900063e59b900030003f44109000700030017
0003002700030037000300045db8001110b900170003f441090008001700
180017002800170038001700045d303137343633321615140623222e0211
343633321615140623222e02462f2120302f21101d160d2f2120302f2110
1d160d46202e2c20202e0c141c0162202e2c20202e0c141c0000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 2156 36 <0002fff8000002ca02c40007000a004000b800004558b800002f1bb90000
000c3e59b800004558b800022f1bb9000200063e59b800004558b800062f
1bb9000600063e59bb00080002000400042b30310133012327210723010b
01012c6d01319042fecd408d01d46d6f02c4fd3ca2a2010e0120fee00000
>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 2276 38 <0001002cffee02b802d600230082bb00080005001900042b410900060008
00160008002600080036000800045d00b800004558b8001e2f1bb9001e00
0c3e59b800004558b800142f1bb9001400063e59b8001e10b900030002f4
41090008000300180003002800030038000300045db8001410b9000d0002
f441090007000d0017000d0027000d0037000d00045d3031012e0123220e
0215141e0233323637170e0123222e0235343e0233321e0217024d1c5a2b
375a4123223f583739581b652f885b538b64383b678c52224a443c15021e
262328465e373a6045262d25473b4137638953558960340d1b281c000000
>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 2516 39 <0002004e000002d002c4000c0019007ab8001a2fb800122fb8001a10b800
00d0b800002f41090009001200190012002900120039001200045db80012
10b900060005f4b8000010b900180004f4b8000610b8001bdc00b8000045
58b800002f1bb90000000c3e59b800004558b8000b2f1bb9000b00063e59
b9000d0002f4b8000010b900170002f430311333321e0215140e022b0137
323e0235342e022b01114efb458c704646708c45fbe731624f32324f6231
6902c4245387645d8656296e17375e484c603614fe160000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 2720 40 <0001004e0000023502c4000b0055bb00030004000000042bb8000310b800
07d000b800004558b800002f1bb90000000c3e59b800004558b8000a2f1b
b9000a00063e59bb00050002000600042bb8000010b900020002f4b8000a
10b900080002f430311321152115211521152115214e01d5fea90145febb
0169fe1902c46eb46ac87000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 2852 41 <0001004e0000021702c40009004bbb00030004000000042bb8000310b800
07d000b800004558b800002f1bb90000000c3e59b800004558b800082f1b
b9000800063e59bb00050002000600042bb8000010b900020002f4303113
2115211521152111234e01c9feb50138fec87e02c46ec26afed6>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 3228 48 <0001004e0000034a02c4000f00bcb800102fb800072fb8001010b80000d0
b800002fb8000710b900060004f4ba000300000006111239b8000710b800
09d0b800092fb8000010b9000d0004f4b8000610b80011dc00b800004558
b800002f1bb90000000c3e59b800004558b800042f1bb90004000c3e59b8
00004558b800062f1bb9000600063e59b800004558b8000a2f1bb9000a00
063e59b800004558b8000e2f1bb9000e00063e59ba000300060000111239
ba000900060000111239ba000d0006000011123930311333133313331123
11230323032311234ec5b803b6c67d02d758d4027802c4fe0901f7fd3c02
39fdc70239fdc700>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 3476 53 <0002004e0000026402c4000f001c00b3b8001d2fb800152fb8001d10b800
00d0b800002f41090009001500190015002900150039001500045db80015
10b900060004f4ba000900000006111239b8001510b8000bd0b8000b2fb8
000010b9001b0004f4b8000dd0b8000610b8001edc00b800004558b80000
2f1bb90000000c3e59b800004558b8000a2f1bb9000a00063e59b8000045
58b8000e2f1bb9000e00063e59bb00100002000c00042bba0009000c0010
111239b8000010b9001a0002f430311333321e0215140607132303231123
13323e0235342e022b01154ef6325e492c574bbd98a45c7ee51b362b1c1a
2833187202c415304e384d6111fec6012cfed40193081629201d251608c7
0000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 4096 55 <000100040000023402c400070041bb00050004000000042b00b800004558
b800022f1bb90002000c3e59b800004558b800062f1bb9000600063e59b8
000210b900000002f4b80004d0b80005d030311323352115231123ddd902
30d97e02566e6efdaa00>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 4196 68 <00020026fff401e201ee0020002f00e7b800302fb8000e2fb80000d0b800
002fb8003010b80009d0b800092fb8000e10b9001e0004f4ba0001000900
1e111239b8000e10b80021d0b8000910b900270004f44109000600270016
0027002600270036002700045db8001e10b80031dc00b800004558b80019
2f1bb90019000a3e59b800004558b800042f1bb9000400063e59b8000045
58b8001f2f1bb9001f00063e59bb000e0001002100042bb8000410b9002c
0002f441090007002c0017002c0027002c0037002c00045dba0001000400
2c111239b8001910b900120002f441090008001200180012002800120038
001200045d303125230e0123222e0235343e023335342623220607273e01
33321e021511232723220e0215141e02333236350172031250331d3f3523
3d607538412d2646173e296b374053301370021b1d4036240f181e0f3e40
3d20290f23392a3640220b0c2d2b2017492626243a4824fedcdb05111f1b
11170e0642390000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 4940 70 <0001002cfff201e201ee00210082bb00080004001900042b410900060008
00160008002600080036000800045d00b800004558b8001e2f1bb9001e00
0a3e59b800004558b800142f1bb9001400063e59b8001e10b900030002f4
41090008000300180003002800030038000300045db8001410b9000d0002
f441090007000d0017000d0027000d0037000d00045d3031012e0123220e
0215141e0233323637170e0123222e0235343e023332161701900e381d21
322110112233221c38114b1e5d36355f472929465d3535631d015b141b1b
2c371c1c372c1b16154c202322425e3c3a5e42242823>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 5172 71 <0002002bfff2023002f40018002c00f9b8002d2fb800172fb80001d0b800
012fb8001710b80003d0b800032fb8002d10b8000bd0b8000b2fb8001710
b80015d0b800152fb8001710b900180004f4b8000b10b900190004f44109
0006001900160019002600190036001900045db8001710b80023d0b80023
2fb8001810b8002edc00b800004558b800102f1bb90010000a3e59b80000
4558b800062f1bb9000600063e59b800004558b800002f1bb9000000063e
59b8000610b9001e0002f441090007001e0017001e0027001e0037001e00
045dba00030006001e111239b8001010b900280002f44109000800280018
0028002800280038002800045dba0016001000281112393031212335230e
0123222e0235343e0233321e021733113301141e0233323e0235342e0223
220e020230720219593337573d21223e56332134271c090378fe75112234
23213425131325342123342211482a2c29455d35355c44270f161a0c0151
fdfe1c382c1c1b2c371c1c382c1c1b2c37000000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 5552 72 <0002002cfff2021201ee0008002600a5b800272fb800002fb8002710b800
1dd0b8001d2fb9000d0004f4b80008d0b8000010b900090004f4b8000cd0
b8000c2fb8000910b80028dc00b800004558b800222f1bb90022000a3e59
b800004558b800182f1bb9001800063e59bb00000001000c00042bb80022
10b900050002f441090008000500180005002800050038000500045db800
1810b900120002f441090007001200170012002700120037001200045d30
3101342e0223220607051c0107211e0333323637170623222e0235343e02
33321e02019a0d1c2b1d364b04016e01fe93021726301a2d3e1450478738
5e452727445d3632553e230120172a20134133360810081a2b1f12211d40
6023405d3b3a5f43252141610000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 6772 76 <00020039000000d302cb0003000f0090bb000a0005000400042b41090006
000a0016000a0026000a0036000a00045dba00000004000a111239b80000
2fb900010004f4b8000a10b80011dc00b800004558b800002f1bb9000000
0a3e59b800004558b800072f1bb90007000c3e59b800004558b800022f1b
b9000200063e59b8000710b9000d0003f441090008000d0018000d002800
0d0038000d00045d3031133311230334363332161514062322264a787811
2b21212d2d21212b01e0fe2002831d2b291f1f292b000000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 6976 77 <0002ffdeff1000d302cb0013001f00c0bb001a0005001400042b41090009
001400190014002900140039001400045dba00120014001a111239b80012
2fb900010004f4b8001a10b80021dc00b800004558b800002f1bb9000000
0a3e59b800004558b800172f1bb90017000c3e59b800004558b800062f1b
b9000600083e59b800004558b800092f1bb9000900083e59b8000610b900
0d0002f441090007000d0017000d0027000d0037000d00045db8001710b9
001d0003f441090008001d0018001d0028001d0038001d00045d30311311
140e0223222627371e0133323e023511273436333216151406232226c20e
2743360f1e090a081207151a0e04112b21212d2d21212b01e0fe032b4d39
220402660202101c25150202a31d2b291f1f292b0000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 7268 79 <0001004a000000c202f40003001ebb00010004000000042b00b800004558
b800022f1bb9000200063e593031133311234a787802f4fd0c00>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 7324 80 <000100480000033601ee002d0107bb001e0004001f00042bbb0013000400
1400042bbb00060004000700042bb8001e10b80021d0b800212fba002300
1f001e111239ba002b00140013111239b8000610b8002fdc00b800004558
b800202f1bb90020000a3e59b800004558b800002f1bb90000000a3e59b8
00004558b800282f1bb90028000a3e59b800004558b800062f1bb9000600
063e59b800004558b800132f1bb9001300063e59b800004558b8001e2f1b
b9001e00063e59b8002010b9000d0001f441050099000d00a9000d00025d
41130008000d0018000d0028000d0038000d0048000d0058000d0068000d
0078000d0088000d00095db80018d0ba00230020000d111239ba002b0020
000d111239303101321e0215112311342e0223220e021511231134262322
0e02151123113315333e03333216173e0102852f432b14780614231d1c28
1a0c782b2e1b28190d787202081b25301d384a14185001ee21364625fed4
010a152e251818262f17fefa01222d3b17242f18fef801e04d12201a0f32
292c2f000000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 7720 81 <000100480000020201ee001a00cbb8001b2fb8000d2fb8001b10b80000d0
b800002fb900180004f4b80002d0b800022fba000300000018111239b800
0d10b9000c0004f4b8001cdc00b800004558b800002f1bb90000000a3e59
b800004558b800062f1bb90006000a3e59b800004558b8000c2f1bb9000c
00063e59b800004558b800192f1bb9001900063e59b8000010b900130001
f441050099001300a9001300025d41130008001300180013002800130038
0013004800130058001300680013007800130088001300095dba00030000
00131112393031133315333e0133321e0215112311342e0223220e021511
23487202104f362f432b14780614231d1d2a1b0e7801e04d243721364625
fed4010a152e251817242f18fef8>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 8004 82 <0002002cfff2023601ee0013002700b9b800282fb8001e2fb8002810b800
00d0b800002f41090009001e0019001e0029001e0039001e00045db8001e
10b9000a0004f4b8000010b900140004f441090006001400160014002600
140036001400045db8000a10b80029dc00b800004558b800052f1bb90005
000a3e59b800004558b8000f2f1bb9000f00063e59b900190002f4410900
07001900170019002700190037001900045db8000510b900230002f44109
0008002300180023002800230038002300045d303137343e0233321e0215
140e0223222e0237141e0233323e0235342e0223220e022c294660363660
462929466036366046297a11223424243422111122342424342211f2395d
422424425d39395e432626435e391c382c1c1c2c381c1c372c1b1b2c3700
>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 8304 83 <00020048ff10024d01ee0018002c0116b8002d2fb800192fb8002d10b800
17d0b800172fb900160004f4b80000d0b800002fb8001610b80002d0b800
022f41090009001900190019002900190039001900045db8001910b9000c
0004f4b8001610b80014d0b800142fb8001610b80023d0b800232fb8000c
10b8002edc00b800004558b800002f1bb90000000a3e59b800004558b800
072f1bb90007000a3e59b800004558b800112f1bb9001100063e59b80000
10b9001e0001f441050099001e00a9001e00025d41130008001e0018001e
0028001e0038001e0048001e0058001e0068001e0078001e0088001e0009
5dba00020000001e111239b8001110b900280002f4410900070028001700
28002700280037002800045dba00150011002811123930311315333e0333
321e0215140e02232226272311231105342e0223220e0215141e0233323e
02bb03091d2a352133563e22213d57373355170278018b11223423213425
13132534212334221101e0430e1d170f27445c35355d45292a24fed002d0
ee1c372c1b1c2c381c1c372c1b1c2c380000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 9120 85 <000100480000016601ee00140090bb00120004000000042bb8001210b800
02d0b800022fba00030000001211123900b800004558b800062f1bb90006
000a3e59b800004558b800092f1bb90009000a3e59b800004558b800002f
1bb90000000a3e59b800004558b800132f1bb9001300063e59b8000610b9
000d0002f441090008000d0018000d0028000d0038000d00045dba000300
06000d1112393031133315333e0133321617152e0123220e021511234873
021448300710060c110829321c0a7801e0502a3401026e03021e2a2c0dfe
ff00>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 9332 86 <0001000ffff2019d01ee002f00c1b800302fb8001f2fb8003010b80027d0
b800272fb900060004f44109000600060016000600260006003600060004
5d41090009001f0019001f0029001f0039001f00045db8001f10b9000e00
04f4b8002fd0b8002f2fb8000e10b80031dc00b800004558b8002c2f1bb9
002c000a3e59b800004558b800132f1bb9001300063e59b8002c10b90003
0002f441090008000300180003002800030038000300045db8001310b900
1a0002f441090007001a0017001a0027001a0037001a00045d3031012e01
232206151416171e0315140e0223222627371e0133323e02353426272e03
35343e0233321617014f1038211d3035331b372d1c21374927386a234f14
40270d1b170e37371b3328182136442434631d0160151f181c1c170c0614
2131232c3d261129264a1a22060d16101e1a0d06131f2e22283a25122425
0000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 9880 88 <00010044fff201fe01e0001a00aeb8001b2fb800182fb900000004f4b800
1810b80002d0b800022fba000300180000111239b8001b10b8000bd0b800
0b2fb9000e0004f4b8000010b8001cdc00b800004558b8000c2f1bb9000c
000a3e59b800004558b800192f1bb90019000a3e59b800004558b800062f
1bb9000600063e59b800004558b800002f1bb9000000063e59b8000610b9
00130002f441090007001300170013002700130037001300045dba000300
0600131112393031212335230e0123222e0235113311141e0233323e0235
113301fe7202104f362f432b14780614231d1c2b1b0e784d243721364625
012cfef6152e251817242f1801080000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 10380 92 <00010000ff10020101e00018007000b800004558b800002f1bb90000000a
3e59b800004558b800042f1bb90004000a3e59b800004558b8000b2f1bb9
000b00083e59b800004558b8000e2f1bb9000e00083e59ba0003000b0000
111239b8000b10b900120002f44109000700120017001200270012003700
1200045d3031113313331333030e0323222627371e0133323e023f018586
02777de30d1e2a39280f1f100a0c170a131a120e081801e0fea3015dfdb9
21332312030468040309131c133d0000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 10576 93 <00010022000001c001e00009003900b800004558b800032f1bb90003000a
3e59b800004558b800082f1bb9000800063e59b8000310b900010002f4b8
000810b900060002f4303137012335211501211521220103f70186fefc01
10fe626a0116606afeec62000000>FAAAAA+AvenirNext-DemiBold AddT42Char 
1 11024 181 <0003002cfff2023602c400130027002b00e8b8002c2fb8001e2fb8002c10
b80000d0b800002f41090009001e0019001e0029001e0039001e00045db8
001e10b9000a0004f4b8000010b900140004f44109000600140016001400
2600140036001400045dba0029001e000a111239ba002b0000000a111239
b8000a10b8002ddc00b800004558b800282f1bb90028000c3e59b8000045
58b800052f1bb90005000a3e59b800004558b8000f2f1bb9000f00063e59
b900190002f441090007001900170019002700190037001900045db80005
10b900230002f441090008002300180023002800230038002300045db800
2810b9002a0003f4303137343e0233321e0215140e0223222e0237141e02
33323e0235342e0223220e02133307232c29466036366046292946603636
6046297a11223424243422111122342424342211a6888d5ef2395d422424
425d39395e432626435e391c382c1c1c2c381c1c372c1b1b2c3701b69000
>FAAAAA+AvenirNext-DemiBold AddT42Char 

1 0 3 <> FAAAAA+AvenirNext-DemiBold AddT42Char 
1 0 0 <000400000000020002ce000300230027002b0049b8002c2fb8001c2fb800
2c10b80026d0b800262fb900160004f4b8001c10b900250004f4b8002ddc
00bb00030001002400042bbb00250001001900042bbb0004000100010004
2b3031373533152f0134373e01373e0335342623220607273e0133321615
140607060706151711211101112111de3835020d07161110140a042d1f1f
2d0632074a3636461926250606bffe6401cefe00754343751138190d1d11
0f1713110924312c33084841473c20352321131434b80269fd97029cfd32
02ce>FAAAAA+AvenirNext-DemiBold AddT42Char 
FAAAAA+AvenirNext-DemiBold /CharStrings get begin
/hyphen 16 def
/one 20 def
/colon 29 def
/A 36 def
/C 38 def
/D 39 def
/E 40 def
/F 41 def
/M 48 def
/R 53 def
/T 55 def
/a 68 def
/c 70 def
/d 71 def
/e 72 def
/i 76 def
/j 77 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/u 88 def
/y 92 def
/z 93 def
/oacute 181 def
/space 3 def
end
FAAAAA+AvenirNext-DemiBold /Encoding get
dup 45 /hyphen put
dup 49 /one put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 121 /y put
dup 122 /z put
dup 151 /oacute put
dup 202 /space put
pop
end
%ADOEndSubsetFont
/MTRYBT+AvenirNext-DemiBold /FAAAAA+AvenirNext-DemiBold findfont ct_VMDictPut/MTRYBT+AvenirNext-DemiBold*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D /E /F 6{/.notdef}rp /M 4{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i /j /.notdef /l /m /n /o /p /.notdef /r /s /.notdef /u 3{/.notdef}rp /y /z 28{/.notdef}rp /oacute 50{/.notdef}rp /space 53{/.notdef}rp]MTRYBT+AvenirNext-DemiBold nfMTRYBT+AvenirNext-DemiBold*1 [24 0 0 -24 0 0 ]msf36 70.08 mo(Formulario\312C-1:\312Ejemplo\312de\312Modelo\312de\312Acciones\312)[12.6 14.64 8.73596 21.36 13.968 6.43213 13.2001 8.73596 6.43213 14.64 6 16.704 7.68018 14.64 7.20007 6 14.64 6.43213 13.7761 21.36 15.1919 6.43213 14.64 6 15.2161 13.7761 6 22.08 14.64 15.2161 13.7761 6.43213 14.64 6 15.2161 13.7761 5.56082 16.9438 11.7122 11.7122 6.43213 14.64 13.968 13.7761 10.656 0 ]xsh36 98.8799 mo(Tomadas\312y\312Declaraci\227n\312de\312Razones)[11.3278 14.64 21.36 13.2001 15.2161 13.2001 10.656 6 12.312 6 18.3362 13.7761 11.7122 6.43213 13.2001 8.42157 13.2001 11.7122 6.43213 14.64 13.968 6 15.2161 13.7761 6 14.8055 13.2001 11.5679 14.64 13.968 13.7761 0 ]xsh.5 lw
67.5 176.43 mo
576 176.43 li
@
6 lw
36 175.18 mo
69.033 175.18 li
false sop
0 0 0 0 cmyk
@
.5 lw
67.5 206.43 mo
576 206.43 li
true sop
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
@
6 lw
36 205.18 mo
154.997 205.18 li
false sop
0 0 0 0 cmyk
@
.5 lw
67.5 236.43 mo
576 236.43 li
true sop
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
@
6 lw
36 235.18 mo
161.091 235.18 li
false sop
0 0 0 0 cmyk
@
.5 lw
67.5 266.43 mo
576 266.43 li
true sop
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
@
6 lw
36 265.18 mo
331.061 265.18 li
false sop
0 0 0 0 cmyk
@
.5 lw
67.5 296.43 mo
576 296.43 li
true sop
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
@
6 lw
36 295.18 mo
195.411 295.18 li
false sop
0 0 0 0 cmyk
@
true sop
/0 /CSD get_res devncs
.749721 .679194 .670497 .901457 devn
%ADOBeginSubsetFont: GAAAAA+AvenirNext-Regular Initial
ct_T42Dict begin
-0.391 -0.41 1.309 1.191
 256 array 0 1 255 {1 index exch /.notdef put} for  /GAAAAA+AvenirNext-Regular
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000001a6670676d000000000000014800000173
676c7966c8d3484b00002c20000042b868656164f8982bf9000002bc0000
00366868656100000000000002f400000024686d74780000000000000318
0000128c6c6f63610122b1ec000015a4000012906d617870000000000000
2834000000206e616d65f177095200002854000003577072657000000000
00002bac0000007267646972000000000000000000000000000301c70190
0005000402bc028a0000008c02bc028a000001dd003200fa0000020b0503
0202020202048000002f5000204a00000000000000004c494e4f0000000d
fb0203e8fe92000003e8016e0000009b0000000001d402c4002000200004
0014003600400090004800000012ff10000001d4000c02c400120000b800
002c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
00012c2020456944b001602db800022cb800012a212db800032c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800042c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800052c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800062c2020456944b001
602020457d691844b001602db800072cb800062a2db800082c4b20b00326
5358b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326
53582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800092c4b
535845441b2121592d000001000000020000ffa1144d5f0f3cf5001903e8
00000000c05a9a6900000000d57c4d9cfe76fe65051d04a8000000090002
0001000000000001000003e8fe9200000621fe76fed7051d000100000000
0000000000000000000004a30200000001f400000000000000fa00000148
006e01950064022c0023024400340341002602c0003101040064012c0020
012c004601bc001f029a004e0104002d014000300104004c017200050244
003a0244007202440033024400310244002a024400380244003c0244004e
0244003f0244003e012c0060012c003a029a004e029a004e029a004e01e2
00300320002302bc000a027c005e02d0003802f5005e0250005e0232005e
030b003802ce005e0104005e01ec00190274005e01fe005e0376005e02fc
005e035200380244005e034b00380257005e02340032023a000c02c6005a
026f000303cc000e02890013025a0000023c001f012c003a01720005012c
0050029a005001f4000000f0fff602160037027d005c01f40038027d0038
023c00380127000c027800380247005c00fa004d00fbffe501fe005c00fc
005c037300560245005602630038027b005a027b00380168005601bc0026
013d00040245005601e8001002ea001a01e4001001e8001001ba001f012c
000000de0051012c0032029a005900fa00000148006e024400580244004b
024400120244000a00de00510244005300f0ffe5032000140168002801e2
0034029a004e014000300258004800f0fff101900033029a004e0172002b
0172002700f0003b022c0048025800300104004c00f0000e017200450168
001c01e2003d03480045034800450348002701e2002e02bc000a02bc000a
02bc000a02bc000a02bc000a02bc000a03de000b02d000380250005e0250
005e0250005e0250005e0104ffe60104005e0104ffed0104ffef02f5000d
02fc005e0352003803520038035200380352003803520038029a00840352
003802c6005a02c6005a02c6005a02c6005a025a00000244005e02550058
0216003702160037021600370216003702160037021600370366003801f4
0038023c0038023c0038023c0038023c003800faffdf00fa005b00faffea
00faffeb0263003002450056026300380263003802630038026300380263
0038029a004e026300300245005602450056024500560245005601e80010
0279005c01e8001002bc000a0216003702bc000a0216003702bc000a0216
003702d0003801f4003802d0003801f4003802d0003801f4003802d00038
01f4003802f5005e027d003802f5000d027d00380250005e023c00380250
005e023c00380250005e023c00380250005e023c00380250005e023c0038
030b003802780038030b003802780038030b003802780038030f00380278
003802ce005e0247ffea02ce005e024700260104ffe100faffdd0104fffc
00fafff70104001700fa00120104005300fa005b02de005e01f2004d01ec
001900fbffe50274005e01fe005c01fe005e00fc005c01fe005e00fc002e
01fe005e00fc005c01fe005e0138005c01fe000c00fc000b02fc005e0245
005602fc005e0245005602fc005e024500560245ffe50352003802630038
0352003802630038035200380263003803e0004703e200380257005e0168
00560257005e0168002b0257005e016800420234003201bc002602340032
01bc00260234003201bc00260234003201bc0026023a000c013d0004023a
000c013d0004023a000c013d000402c6005a0245005602c6005a02450056
02c6005a0245005602c6005a0245005602c6005a0245005602c6005a0245
005603cc000e02ea001a025a000001e80010025a0000023c001f01ba001f
023c001f01ba001f023c001f01ba001f024400170234003201bc0026023a
000c013d000400f0ffe300f0ffe300f0fff100f0ffe500f0004800f00018
00f0001e00f0ffd600f0ffc30190001e0258001e00de002a00de002a00de
002a0183002a0183002a0183002a029e000f02e8002f022c004802330020
022c0029022c003201f4004903e8007103e80019013b003b013b00450064
ff330244000c01f4004803e8004802e8002f0320003c01f0001f029e000f
02c70047025c0019029a004e0064ff330104004c01edfff802e50029021f
0065029a0047029a0052029a0052029a00520251005f00fbffe500f00030
0220000c036c006801eb005b01e400320168001b01e40026017c0025022e
00320294002801e40035011e005a01e4003e01e4007501e4004501e40038
01e4003301e4003d01e4004301e4005001e4004501e4004202b1003e0181
002a02000032020f00480239002c020700440249003a020400310240003c
0249003c0220000c01e4001b01e4004d01e4001d03cc0028017c0025011e
005a021600060204005a022f00380264005a01f3005a01d5005a02690038
0267005a00fa005a01900015020b005a01a5005a02d4005a0265005a02a0
003801e7005a02a0003801f1005a01c2002801b6000c023c005201f10008
02fe001601ea000a01d4000001f200350216000602160006021600060216
000602160006030bffec02160006021600060216000602160006022f0038
022f0038022f0038022f0038022f00380264005a0264001101f3005a01f3
005a01f3005a01f3005a01f3005a01f3005a01f3005a01f3005a01f3005a
026900380269003802690038026900380267005a0267005a00fa001700fa
005a00faffda00fa004e00faffe700faffe900fafff700faffe201900015
020b005a01a5000801a5005a01a5005a01a5005a01a5005a0265005a0265
005a0265005a0265005a02a0003802a0003802a0003802a0003802a00038
02a0002802a0003802a0003802a0003801f1005a01f1005a01f1005a01c2
002801c2002801c2002801c2002801c200280385002b01b6000c01b6000c
01b6000c023c0052023c0052023c0052023c0052023c0052023c0052023c
0052023c0052023c0052023c005202fe001601d4000001d4000001d40000
01f2003501f2003501f200350282005a02d6005a0382005a030900400264
001100f0ffe300f0ffe300f0ffd600f0ffe500f0fff100f0ffe500f00018
00f0ffc300f0004800f0fff600f0003b00f0ffc300f0004800f0ffe300f0
ffd600f0ffe500f0fff100f0ffe500f0001800f0fff600f0003b00f0ffe3
00f0005600f00060035200380263003802c6005a024f005600f00013012c
003a027c005e027d004e02f5005e027d00380232005e0127000c02ce005e
024700500244005e027b005a0234003201bc0026023a000c013d000402bc
000a0216003702bc000a0216003702bc000a0216003702bc000a0216fff5
02bc000a0216003702bc000a0216003702bc000a0216003702bc000a0216
003702bc000a0216003702bc000a0216003702bc000a0216003702bc000a
021600370250005e023c00380250005e023c00380250005e023c00380250
005e023c00380250002c023c00130250005e023c00380250005e023c0038
0250005e023c00380104001d00fa00180104005a00fa004d035200380263
003803520038026300380352003802630038035200380263001903520038
026300380352003802630038035200380263003803520038026300380352
003802630038035200380263003803520038026300380352003802630038
02c6005a0245005602c6005a0245005602c6005a024f005602c6005a024f
005602c6005a024f005602c6005a024f005602c6005a024f0056025a0000
01e8001000de002a027d00380104004c00f000500000ff100000ff100000
ff100000ff100000ff100000ff100000ff100000ff100000ff100000ff10
0000ff100000fe760000feda0000ff060000fefc0000ff100000ff100000
fefc0000ff100000ff100000ff100000ff100000ff100000ff1000de0051
01bc0051000000000000000000000000000000000460003303c200330274
005e02bc000a0104005e0208005e030c005e0373005e026f000303730003
04770003057b0003038d005e02890013038d00130491001301fe005e02d0
003802f5005e0376005e00fa004d01f4004d02ee004d02e2004d01e80010
02e2001003dc001004d6001002de004d01e4001002de001003d8001000fc
005c01f40038027d0038037300560104ffef00faffea0148006e0621005e
059f005e0527003803ea005e02f9005e01f7005c04e8005e03f7005e0340
005602bc000a021600370104ffed00faffe8035200380263003802c6005a
0245005602c6005a0245005602c6005a0245005602c6005a0245005602c6
005a0245005602bc000a0216003702bc000a0216003703de000b03660038
030b0038027800380274005e01feffee0352003802630038035200380263
00380531005e04af005e04370038030b00380278003802fc005e02450056
02bc000a0216003703de000b03660038035200380263003002bc000a0216
001802bc000a0216003702500057023c00380250005e023c00380104ffa4
00faffa90104ffef00faffea035200380263003803520038026300380257
003c0168fffd0257005e0168004802c6005a0245003a02c6005a02450056
02ce005e0247ffea02bc000a021600370250005e023c0038035200380263
0038035200380263003803520038026300380352003802630038025a0000
01e8001000de002a00de002a0183002a0104005e02bc000a02160037027c
005e027d005c027c005e027d005c02d0003801f4003802f5005e027d0038
02f5005e027d003802f5005e027d003802f5005e027d00380250005e023c
00380250005e023c00380250005e023c00380250005e023c00380250005e
023c0038030b00380278003802ce005e0247005c02ce005e0247ffe802ce
00180247001202ce005e0247005c0104ffe000faffdb0104ffef00faffea
0274005e01fe005c0274005e01fe005c0274005e01fe005c01fe005e00fc
004e01fefffb00fcfff701fe005e00fcfff701fe005e00fcffe90376005e
037300560376005e037300560376005e0373005602fc005e0245005602fc
005e0245005602fc005e0245005602fc005e024500560352003802630038
0352003802630038035200380263003803520038026300380244005e027b
005a0257005e016800560257005e0168004d0257005e0168004c0257005e
0168fff60234003201bc00260234003201bc00260234003201bc00260234
003201bc0026023a000c013d0004023a000c013d0004023a000c013d0004
02c6005a0245005602c6005a0245005602c6005a0245005602c6005a0245
005602c6005a02450056026f000301e80010026f000301e8001003cc000e
02ea001a03cc000e02ea001a03cc000e02ea001a03cc000e02ea001a03cc
000e02ea001a0289001301e400100289001301e40010025a000001e80010
023c001f01ba001f023c001f01ba001f023c001f01ba001f0247005c013d
000402ea001a01e80010025a000001e80010025a000001e80010025a0000
01e800100250005e023c00380250005e023c003803de000b036600380000
ff100000ff100000ff1000f0ffe50104004c02bc000a0216003702160037
0104fffb00fafff600fa001e02c6005a0245005601e400100376005e0373
00560257005e0168004802c6005a024f00560104002d012c0060012c003a
0148006e01e2003003e801be0258010f019000ab01f400e101f400e1012c
fed7012cfed7012cfeda012cfeda012cfeda012cfeda0250005e02db000c
0204005e02df0038023400320104005e0104ffef01ec001903ad002103dd
005e02db000c02b3005e0289001b02ba005e02bc000a0261005e027c005e
0204005e02c500000250005e03d4003c026f003702fc005e02fc005e02b3
005e02f600240376005e02ce005e0352003802ba005e0244005e02d00038
023a000c0289001b034600320289001302d1005e026f004603dd005e03f0
005e02b3000c0300005e0244005e02df002d043f005e0280002902160037
02570042021d00560184005602250000023c00380330003201cf00280257
005602570056021f0056025f004202b70056023f00560263003802370056
027b005a01f4003801af000a01e80010029b003801e40010023b00560204
0032031d0056032900560228000a028d005601fe0056021d002a03270056
021b003c023c0038024afff6018400560234004001bc002600fa004d00fa
ffeb00fbffe50325002503390056024afff6021f005601e80010022f0056
0210005e019600560478005e0104006000f0ffd002bc000a0288000002f0
0000013000000366000002cd00000329000000faffd002bc000a027c005e
01fc005e02aa001f0250005e023c001f02ce005e035200380104005e0274
005e02bc000a0376005e02fc005e024c002f0352003802ba005e0244005e
025d0036023a000c025a00000346003202890013034f005402f4002c0104
ffef025a00000276003701da00220255005600ef00510244005602760037
0275005e0210000d0261003801e4002201fc003702510056025c004200de
004d02120056020400100246005601e8001001f800370263003802370056
027b005a01fc0038027b003801e1000a02440056031f0038021f00140310
00460326002e00faffeb0244005602630038024400560326002e02d60000
02a8000a0220000001f1001403ac001902c3001400000000000000d40000
00d4000000d4000000d4000000d4000000d4000000d4000000d4000000d4
000000d4000000d400000138000001e4000001e4000001e4000002140000
0244000002e8000002e8000004d8000004d80000062400000844000008e8
000008e800000ac800000ac800000ac800000ac800000bc800000bc80000
0bc800000bc800000bc800000bc800000bc800000c3c00000dd800000f60
0000105c000010e00000115400001300000013bc00001404000014040000
140400001458000015580000161400001804000019040000190400001a38
00001c5800001cbc00001cbc00001cbc00001cbc00001cbc00001cbc0000
1cbc00001cbc00001cbc00001cbc00001cbc00001ce400001ce400001f00
000020ec0000226800002454000025e8000025e800002884000029940000
2a4c00002b9000002b9000002bc800002d6000002ea00000308c00003270
0000344c000035700000377c00003890000039b0000039ec000039ec0000
3a4000003af800003b5c00003b5c00003b5c00003b5c00003b5c00003b5c
00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c0000
3b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c
00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c0000
3b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c
00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c0000
3b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c
00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c0000
3b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c00003b5c
00003b5c00003b5c00003b5c00003b5c00003db400003db400003db40000
3db400003db400003db400003db400003db400003f8800003f8800003f88
00003f8800003fe400003fe400003fe400003fe400003fe400003fe40000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
420c0000420c0000420c0000420c0000420c0000420c0000420c0000420c
0000420c0000420c0000420c0000420c0000420c0000420c0000420c0000
423400004234000042340000423400004234000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b8000042b8000042b8000042b8000042b8000042b8000042b8000042b8
000042b8000042b8000042b8000042b8000042b8000042b8000042b80000
42b80001000004a3006c000700000000000100000000000a000002000327
000000000000000a007e0001000000000003001900000001000000000004
001900190001000000000006001900320003000104090000009a004b0003
000104090001003200e50003000104090002000e01170003000104090003
003201250003000104090004003201570003000104090006003201890003
000104090007011e01bb5a53465550542b4176656e69724e6578742d5265
67756c61725a53465550542b4176656e69724e6578742d526567756c6172
5a53465550542b4176656e69724e6578742d526567756c61720043006f00
70007900720069006700680074002000a900200032003000300034002000
2d002000320030003000370020004c0069006e006f007400790070006500
200047006d00620048002c0020007700770077002e006c0069006e006f00
74007900700065002e0063006f006d002e00200041006c006c0020007200
690067006800740073002000720065007300650072007600650064002e00
5a00530046005500500054002b004100760065006e00690072004e006500
780074002d0052006500670075006c006100720052006500670075006c00
610072005a00530046005500500054002b004100760065006e0069007200
4e006500780074002d0052006500670075006c00610072005a0053004600
5500500054002b004100760065006e00690072004e006500780074002d00
52006500670075006c00610072005a00530046005500500054002b004100
760065006e00690072004e006500780074002d0052006500670075006c00
610072004100760065006e00690072002000690073002000610020007400
72006100640065006d00610072006b0020006f00660020004c0069006e00
6f007400790070006500200047006d006200480020007200650067006900
730074006500720065006400200069006e00200074006800650020005500
2e0053002e00200050006100740065006e007400200061006e0064002000
540072006100640065006d00610072006b0020004f006600660069006300
6500200061006e00640020006d0061007900200062006500200072006500
67006900730074006500720065006400200069006e002000630065007200
7400610069006e0020006f00740068006500720020006a00750072006900
7300640069006300740069006f006e0073002e00b800002b00ba00010003
00022b01ba0004000100022b01bf0004004d004300340026001800000008
2b00bf0001006600540041002f0018000000082bbf000200560043003400
260018000000082bbf00030027002000190012000b000000082b00ba0005
000400072bb8000020457d691844000000>
[16357 725 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 484 15 <0001002dff7400b7005f00030017bb00030004000100042b00bb00020003
000000042b303117233733663943478ceb00>GAAAAA+AvenirNext-Regular AddT42Char 
1 2760 29 <00020060fffa00cc01da000b001700b3bb00000004000600042b411b0006
000000160000002600000036000000460000005600000066000000760000
008600000096000000a6000000b6000000c60000000d5d410500d5000000
e5000000025db8000010b8000cd0b8000610b80012d000b800004558b800
092f1bb9000900093e59b800004558b8000f2f1bb9000f00053e59b80009
10b900030003f44105000800030018000300025db8000f10b900150003f4
4105000700150017001500025d3031131406232226353436333216111406
232226353436333216cc1e18181e1e18181e1e18181e1e18181e01a41521
2115152121fe77152121151521210000>GAAAAA+AvenirNext-Regular AddT42Char 
1 3016 36 <0002000a000002b202c40007000a004000b800004558b800022f1bb90002
000b3e59b800004558b800002f1bb9000000053e59b800004558b800042f
1bb9000400053e59bb00090002000600042b303133230133012327213721
03594f0132460130504efe921b01389c02c4fd3cba4201780000>GAAAAA+AvenirNext-Regular AddT42Char 
1 3544 38 <00010038ffee02b202d600270115bb001f0004000a00042b411b0006001f
0016001f0026001f0036001f0046001f0056001f0066001f0076001f0086
001f0096001f00a6001f00b6001f00c6001f000d5d410500d5001f00e500
1f00025d00b800004558b8000f2f1bb9000f000b3e59b800004558b80005
2f1bb9000500053e59b8000f10b9001a0002f4410500d9001a00e9001a00
025d411b0008001a0018001a0028001a0038001a0048001a0058001a0068
001a0078001a0088001a0098001a00a8001a00b8001a00c8001a000d5db8
000510b900240002f4411b00070024001700240027002400370024004700
24005700240067002400770024008700240097002400a7002400b7002400
c70024000d5d410500d6002400e6002400025d3031250e0323222e023534
3e0233321e0217072e0323220e0215141e023332363702b2123343513050
8862373863874f274b4236123c0b25323b22456d4c28294c6d443d6e2572
1b3024153863885151886338101d291a2c11221a103255703e3e70553232
3700>GAAAAA+AvenirNext-Regular AddT42Char 
1 3936 39 <0002005e000002bd02c4000c001900abb8001a2fb800132fb8001a10b800
00d0b800002f410500da001300ea001300025d411b000900130019001300
290013003900130049001300590013006900130079001300890013009900
1300a9001300b9001300c90013000d5db8001310b900060004f4b8000010
b900190004f4b8000610b8001bdc00b800004558b800002f1bb90000000b
3e59b800004558b8000b2f1bb9000b00053e59b9000d0002f4b8000010b9
00180002f430311333321e0215140e022b013733323e0235342e022b015e
eb42856b42426b8542eb488f50774e27274e77508f02c42c598558598459
2c4032516837376851320000>GAAAAA+AvenirNext-Regular AddT42Char 
1 4320 41 <0001005e0000020902c40009004bbb00000004000100042bb8000010b800
05d000b800004558b800022f1bb90002000b3e59b800004558b800002f1b
b9000000053e59bb00070002000800042bb8000210b900040002f4303133
231121152115211521a64801abfe9d014afeb602c440f63f0000>GAAAAA+AvenirNext-Regular AddT42Char 
1 5464 49 <0001005e0000029e02c4000b008bb8000c2fb800012fb900040004f4b800
0c10b80009d0b800092fb900080004f4b80006d0b800062fb8000410b800
0ddc00b800004558b800022f1bb90002000b3e59b800004558b8000a2f1b
b9000a000b3e59b800004558b800042f1bb9000400053e59b800004558b8
00082f1bb9000800053e59ba000100040002111239ba0007000400021112
393031253311331123012311231133025402485afe6402485a69025bfd3c
0261fd9f02c40000>GAAAAA+AvenirNext-Regular AddT42Char 
1 6712 54 <00010032ffee01f802d600370181b800382fb800252f410500da002500ea
002500025d411b0009002500190025002900250039002500490025005900
250069002500790025008900250099002500a9002500b9002500c9002500
0d5db80000d0b800002fb8003810b8002fd0b8002f2fb900080004f4411b
000600080016000800260008003600080046000800560008006600080076
0008008600080096000800a6000800b6000800c60008000d5d410500d500
0800e5000800025db8002510b900120004f4b80039dc00b800004558b800
342f1bb90034000b3e59b800004558b800172f1bb9001700053e59b80034
10b900030002f4410500d9000300e9000300025d411b0008000300180003
002800030038000300480003005800030068000300780003008800030098
000300a8000300b8000300c80003000d5db8001710b900200002f4411b00
070020001700200027002000370020004700200057002000670020007700
20008700200097002000a7002000b7002000c70020000d5d410500d60020
00e6002000025d3031012e0123220e0215141e02171e0315140e0223222e
0227371e0133323e0235342e02272e0335343e023332161701b51748331a
362c1b1a2b371e254b3c262941532a20403a32133e1753381b382d1d1d30
3e22234436212942502748661a0252202710213222222c1f140a0c1c2d45
35354d32180d1a281a2e263311233322253121160b0b1c2d4230334a3016
33230000>GAAAAA+AvenirNext-Regular AddT42Char 
1 7256 55 <0001000c0000022e02c400070041bb00000004000100042b00b800004558
b800042f1bb90004000b3e59b800004558b800002f1bb9000000053e59b8
000410b900020002f4b80006d0b80007d030312123112335211523014148
ed0222ed028440400000>GAAAAA+AvenirNext-Regular AddT42Char 
1 7396 68 <00020037fff401c901e0002500360182b800372fb800002fb8003710b800
20d0b800202fb9002b0004f4411b0006002b0016002b0026002b0036002b
0046002b0056002b0066002b0076002b0086002b0096002b00a6002b00b6
002b00c6002b000d5d410500d5002b00e5002b00025db80006d0b800062f
b8000010b9000f0004f4b8000010b80017d0b800172fba00180000000f11
1239b8000010b80035d0b8000f10b80038dc00b800004558b8000a2f1bb9
000a00093e59b800004558b800132f1bb9001300053e59b800004558b800
1b2f1bb9001b00053e59bb00250001003600042bb8000a10b900030001f4
410500d9000300e9000300025d411b000800030018000300280003003800
0300480003005800030068000300780003008800030098000300a8000300
b8000300c80003000d5dba0018001b000a111239b8001b10b900300001f4
411b00070030001700300027003000370030004700300057003000670030
00770030008700300097003000a7003000b7003000c70030000d5d410500
d6003000e6003000025d303101342623220607273e0133321e021d011416
17232e0135230e0123222e0235343e023307220e0215141e0233323e023d
010181403d2a4819261d5f3c2642321c04043d0304022051391b392f1f37
5c7740142a55452c1320271424382614012e3d3c1e192d1d26152a402bcd
1b3a141128132f290f223627363f1f09350715282119221509192b381f23
>GAAAAA+AvenirNext-Regular AddT42Char 
1 7936 69 <0002005cfff4024502f40016002a016eb8002b2fb800172fb8002b10b800
02d0b800022fb900010004f4b80004d0b8000110b80006d0b800062f4105
00da001700ea001700025d411b0009001700190017002900170039001700
490017005900170069001700790017008900170099001700a9001700b900
1700c90017000d5db8001710b9000e0004f4b8000110b80016d0b800162f
b8000e10b8002cdc00b800004558b800092f1bb9000900093e59b8000045
58b800012f1bb9000100053e59b800004558b800132f1bb9001300053e59
ba000600130009111239b8000910b9001c0001f4410500d9001c00e9001c
00025d411b0008001c0018001c0028001c0038001c0048001c0058001c00
68001c0078001c0088001c0098001c00a8001c00b8001c00c8001c000d5d
b8001310b900260001f4411b000700260017002600270026003700260047
0026005700260067002600770026008700260097002600a7002600b70026
00c70026000d5d410500d6002600e6002600025d3031371523113311333e
0133321e0215140e022322262725342e0223220e0215141e0233323e02a0
4444021e603337593f23233f593733601e015b182d422a2742301b1b3042
272a422d184f4f02f4fe8f2e2f26425a34345a42262e2d9b2745331e1d33
45282845321d1d3345000000>GAAAAA+AvenirNext-Regular AddT42Char 
1 8428 70 <00010038fff401e401e000210115bb00080004001900042b411b00060008
001600080026000800360008004600080056000800660008007600080086
00080096000800a6000800b6000800c60008000d5d410500d5000800e500
0800025d00b800004558b8001e2f1bb9001e00093e59b800004558b80014
2f1bb9001400053e59b8001e10b900030001f4410500d9000300e9000300
025d411b0008000300180003002800030038000300480003005800030068
000300780003008800030098000300a8000300b8000300c80003000d5db8
001410b9000d0001f4411b0007000d0017000d0027000d0037000d004700
0d0057000d0067000d0077000d0087000d0097000d00a7000d00b7000d00
c7000d000d5d410500d6000d00e6000d00025d3031012e0123220e021514
1e0233323637170e0123222e0235343e023332161701ab11412629422f19
192e42292d3e14331e573d395c412424415c392f611e01691b231d334528
2844331d221b26252c25425a35355a4225292800>GAAAAA+AvenirNext-Regular AddT42Char 
1 8808 71 <00020038fff4022102f40016002a016eb8002b2fb800122fb80000d0b800
002fb8002b10b80008d0b800082fb8001210b80010d0b800102fb8001210
b900130004f4b8001210b80015d0b8000810b900170004f4411b00060017
001600170026001700360017004600170056001700660017007600170086
00170096001700a6001700b6001700c60017000d5d410500d5001700e500
1700025db8001310b8002cdc00b800004558b8000d2f1bb9000d00093e59
b800004558b800142f1bb9001400053e59b800004558b800032f1bb90003
00053e59ba00110003000d111239b9001c0001f4411b0007001c0017001c
0027001c0037001c0047001c0057001c0067001c0077001c0087001c0097
001c00a7001c00b7001c00c7001c000d5d410500d6001c00e6001c00025d
b8000d10b900260001f4410500d9002600e9002600025d411b0008002600
180026002800260038002600480026005800260068002600780026008800
260098002600a8002600b8002600c80026000d5d3031250e0123222e0235
343e023332161733113311233525141e0233323e0235342e0223220e0201
db1e603337593f23233f593733601e024444fea3182d422a2742301b1b30
42272a422d184f2d2e26425a34345a42262f2e0171fd0c4f9b2745331d1d
3245282845331d1e33450000>GAAAAA+AvenirNext-Regular AddT42Char 
1 9300 72 <00020038fff4020401e000080027011bb800282fb800002fb8002810b800
1ed0b8001e2fb900080004f4b8000010b900090004f4b8000cd0b8000c2f
b8000810b8000dd0b8000d2fb8000010b80015d0b800152fb8000910b800
29dc00b800004558b800232f1bb9002300093e59b800004558b800192f1b
b9001900053e59bb00000001000c00042bb8002310b900030001f4410500
d9000300e9000300025d411b000800030018000300280003003800030048
0003005800030068000300780003008800030098000300a8000300b80003
00c80003000d5db8001910b900120001f4411b0007001200170012002700
120037001200470012005700120067001200770012008700120097001200
a7001200b7001200c70012000d5d410500d6001200e6001200025d303101
2e0123220e0207051c0107211e0333323637170e0123222e0235343e0233
321e0201bf034f49223a2c1a02018401fe7c011a2e3e24354d14332a653a
34594025244056323754381d010e4257192b371e16071009233e2e1b3120
28352e25425a35355a4225253f54>GAAAAA+AvenirNext-Regular AddT42Char 
1 9704 74 <00020038ff10022101e00026003a01f8b8003b2fb800082fb8000ad0b800
0a2fb8003b10b80012d0b800122fb8000810b8001ad0b8001a2fb8000810
b9001e0004f4ba001b0012001e111239b8000810b8001cd0b8001210b900
270004f4411b000600270016002700260027003600270046002700560027
0066002700760027008600270096002700a6002700b6002700c60027000d
5d410500d5002700e5002700025db8001e10b8003cdc00b800004558b800
172f1bb9001700093e59b800004558b800232f1bb9002300073e59b80000
4558b800082f1bb9000800053e59b800004558b8000d2f1bb9000d00053e
59b800004558b8001e2f1bb9001e00053e59b8002310b900030002f4411b
000700030017000300270003003700030047000300570003006700030077
0003008700030097000300a7000300b7000300c70003000d5d410500d600
0300e6000300025dba000a00230017111239ba001b00230017111239b800
0d10b9002c0001f4411b0007002c0017002c0027002c0037002c0047002c
0057002c0067002c0077002c0087002c0097002c00a7002c00b7002c00c7
002c000d5d410500d6002c00e6002c00025db8001710b900360001f44105
00d9003600e9003600025d411b0008003600180036002800360038003600
480036005800360068003600780036008800360098003600a8003600b800
3600c80036000d5d3031171e0133323e023d01230e0123222e0235343e02
3332161733353311140e022322262713141e0233323e0235342e0223220e
02731c613632462b14021b633337593f23233f593733621c02441539624e
41762a3e182d422a2742301b1b3042272a422d185e24321d324326582c30
243f583332584226302d51fe3026564830322c01822542321d1a30432925
42321e1e32420000>GAAAAA+AvenirNext-Regular AddT42Char 
1 10372 75 <0001005c000001f102f4001800c2b800192fb800082fb8001910b80015d0
b800152fb900140004f4b80000d0b800002fb8000810b900070004f4b800
1410b80017d0b8000710b8001adc00b800004558b800032f1bb900030009
3e59b800004558b800072f1bb9000700053e59b800004558b800142f1bb9
001400053e59b8000310b9000e0001f4410500d9000e00e9000e00025d41
1b0008000e0018000e0028000e0038000e0048000e0058000e0068000e00
78000e0088000e0098000e00a8000e00b8000e00c8000e000d5d3031133e
0133321615112311342e0223220e021d0123113311a21358325959440c1d
31251b3328184444018729306a57fee10103253c2b18162d452ff002f4fe
9300>GAAAAA+AvenirNext-Regular AddT42Char 
1 10644 76 <0002004d000000ad02b80003000f0082bb00040004000a00042b411b0006
000400160004002600040036000400460004005600040066000400760004
008600040096000400a6000400b6000400c60004000d5d410500d5000400
e5000400025dba0001000a0004111239b800012fb900000004f400b80000
4558b800002f1bb9000000053e59bb000d0002000700042b303133231133
3714062322263534363332169f44440e1e12121e1e12121e01d4b4151b1b
15151b1b>GAAAAA+AvenirNext-Regular AddT42Char 
1 11152 79 <0001005c000000a002f40003001ebb00000004000100042b00b800004558
b800002f1bb9000000053e59303133231133a0444402f4000000>GAAAAA+AvenirNext-Regular AddT42Char 
1 11208 80 <000100560000031d01e00031010abb00270004002800042bbb001a000400
1b00042bbb000f0004001000042bba0008001b001a111239b8002810b800
2cd0b8002c2fb8002710b8002dd0b8002d2fb8002710b80030d0b800302f
b8000f10b80033dc00b800004558b800032f1bb9000300093e59b8000045
58b8000b2f1bb9000b00093e59b800004558b8000f2f1bb9000f00053e59
b800004558b8001a2f1bb9001a00053e59b800004558b800272f1bb90027
00053e59ba0008000f0003111239b8000b10b900140001f4410500d90014
00e9001400025d411b000800140018001400280014003800140048001400
5800140068001400780014008800140098001400a8001400b8001400c800
14000d5db80021d03031133e0133321e02173e0133321615112311342623
220e021d012311342e0223220e021d012311342627331e0115339d145333
132927210c185339595944374225331f0e440a192c221831271844020241
020202018429330817261e30336a57fee101034a5a1e313e21f901112238
2715162d452ff0016d133c18132e0f000000>GAAAAA+AvenirNext-Regular AddT42Char 
1 11616 81 <00010056000001ef01e0001d00e6b8001e2fb8000c2fb8001e10b80019d0
b800192fb900180004f4b80000d0b800002fb8001810b80003d0b800032f
ba000400190018111239b8000c10b9000b0004f4b8001910b8001dd0b800
1d2fb8000b10b8001fdc00b800004558b800072f1bb9000700093e59b800
004558b8000b2f1bb9000b00053e59b800004558b800182f1bb900180005
3e59ba0004000b0007111239b8000710b900120001f4410500d9001200e9
001200025d411b0008001200180012002800120038001200480012005800
120068001200780012008800120098001200a8001200b8001200c8001200
0d5d3031131e0115333e0133321615112311342e0223220e021d01231134
262797020202145a325959440c1d31251b33281844020201d4132e0f2933
6a57fee10103253c2b18162d452ff0016d133c18>GAAAAA+AvenirNext-Regular AddT42Char 
1 11936 82 <00020038fff4022b01e0001300270179b800282fb800142f410500da0014
00ea001400025d411b000900140019001400290014003900140049001400
5900140069001400790014008900140099001400a9001400b9001400c900
14000d5db900000004f4b8002810b8000ad0b8000a2fb9001e0004f4411b
0006001e0016001e0026001e0036001e0046001e0056001e0066001e0076
001e0086001e0096001e00a6001e00b6001e00c6001e000d5d410500d500
1e00e5001e00025db8000010b80029dc00b800004558b8000f2f1bb9000f
00093e59b800004558b800052f1bb9000500053e59b8000f10b900190001
f4410500d9001900e9001900025d411b0008001900180019002800190038
001900480019005800190068001900780019008800190098001900a80019
00b8001900c80019000d5db8000510b900230001f4411b00070023001700
230027002300370023004700230057002300670023007700230087002300
97002300a7002300b7002300c70023000d5d410500d6002300e600230002
5d303125140e0223222e0235343e0233321e0207342e0223220e0215141e
0233323e02022b25425c37365c422525425c36375c422548192e42292941
2e19192e412929422e19ea355a422525425a35355a422525425a35274533
1e1e3345272745331d1d3345>GAAAAA+AvenirNext-Regular AddT42Char 
1 12428 83 <0002005aff10024301e00016002a0167b8002b2fb800172fb8002b10b800
01d0b800012fb900000004f4b80003d0b8000010b80005d0b800052f4105
00da001700ea001700025d411b0009001700190017002900170039001700
490017005900170069001700790017008900170099001700a9001700b900
1700c90017000d5db8001710b9000d0004f4b8000010b80015d0b800152f
b8000d10b8002cdc00b800004558b800082f1bb9000800093e59b8000045
58b800122f1bb9001200053e59ba000500120008111239ba001600120008
111239b8000810b9001c0001f4410500d9001c00e9001c00025d411b0008
001c0018001c0028001c0038001c0048001c0058001c0068001c0078001c
0088001c0098001c00a8001c00b8001c00c8001c000d5db8001210b90026
0001f4411b00070026001700260027002600370026004700260057002600
67002600770026008700260097002600a7002600b7002600c70026000d5d
410500d6002600e6002600025d30311723113315333e0133321e0215140e
02232226272325342e0223220e0215141e0233323e029e4444031d613237
593f23233f593732611d03015d182d422a2742301b1b3042272a422d18f0
02c4512e2f26425a34345a42262f2c9b2745331e1d3345282845321d1d33
45000000>GAAAAA+AvenirNext-Regular AddT42Char 
1 13388 85 <000100560000016001e0001a00d0bb00170004000000042bb8000010b800
03d0b800032fb8001710b80004d0b800042fb8001710b80007d0b800072f
ba000800000017111239b8000010b80019d000b800004558b8000b2f1bb9
000b00093e59b800004558b8000e2f1bb9000e00093e59b800004558b800
182f1bb9001800053e59ba00080018000b111239b8000b10b900120002f4
410500d9001200e9001200025d411b000800120018001200280012003800
1200480012005800120068001200780012008800120098001200a8001200
b8001200c80012000d5d303113342627331e0115333e0133321617072e01
23220e021d0123115a0202410202021450320d150b09061c0e1b32251744
016d133c18132e0f29330203400204142b432ff0016d>GAAAAA+AvenirNext-Regular AddT42Char 
1 13680 86 <00010026fff4018f01e0002f0181b800302fb8001f2f410500da001f00ea
001f00025d411b0009001f0019001f0029001f0039001f0049001f005900
1f0069001f0079001f0089001f0099001f00a9001f00b9001f00c9001f00
0d5db80000d0b800002fb8003010b80027d0b800272fb900080004f4411b
000600080016000800260008003600080046000800560008006600080076
0008008600080096000800a6000800b6000800c60008000d5d410500d500
0800e5000800025db8001f10b9000e0004f4b80031dc00b800004558b800
2c2f1bb9002c00093e59b800004558b800132f1bb9001300053e59b8002c
10b900030001f4410500d9000300e9000300025d411b0008000300180003
002800030038000300480003005800030068000300780003008800030098
000300a8000300b8000300c80003000d5db8001310b9001a0001f4411b00
07001a0017001a0027001a0037001a0047001a0057001a0067001a007700
1a0087001a0097001a00a7001a00b7001a00c7001a000d5d410500d6001a
00e6001a00025d3031012e0123220e02151416171e0115140e0223222627
371e0133323e02353426272e0335343e023332161701530f3d2712241c11
363a534f1f323f203564203612462a16281e124743152f281a1c2f3c2031
5c1701651d2508121c1321230c1141372837230f2c2f281f2a08141f1725
2510050f1d2c21243321102c2800>GAAAAA+AvenirNext-Regular AddT42Char 
1 14204 87 <00010004fffa012d0258001b00c0bb00020004001300042bb8001310b800
17d0b8000210b80019d000b800004558b800162f1bb9001600093e59b800
004558b8001a2f1bb9001a00093e59b800004558b8000e2f1bb9000e0005
3e59b8001a10b900000001f4b8000e10b900070001f4411b000700070017
000700270007003700070047000700570007006700070077000700870007
0097000700a7000700b7000700c70007000d5d410500d6000700e6000700
025dba000a000e0016111239b8000010b80014d0b80015d0303101231114
1e0233323637170e0123222e02351123353335331533012d840a131a0f0e
1f0e03122717132a241761614484019bfeef1a22130708073b07070a1c30
270124398484>GAAAAA+AvenirNext-Regular AddT42Char 
1 14480 88 <00010056fff401ef01d4001d00c7b8001e2fb800172fb80000d0b800002f
b8001710b80003d0b800032fb8001710b9001a0004f4ba00040017001a11
1239b8001e10b8000ad0b8000a2fb9000d0004f4b8001a10b8001dd0b800
1d2fb8001a10b8001fdc00b800004558b800002f1bb9000000053e59b800
004558b800072f1bb9000700053e59b900120001f4411b00070012001700
120027001200370012004700120057001200670012007700120087001200
97001200a7001200b7001200c70012000d5d410500d6001200e600120002
5d3031212e0135230e0123222635113311141e0233323e023d0133111416
1701ae020202145a325959440c1d31251b332818440202132e0f29336a57
011ffefd253c2b18162d452ff0fe93133c18>GAAAAA+AvenirNext-Regular AddT42Char 
1 15796 171 <00030038fff4020402c400080027002b014cb8002c2fb800002fb8002c10
b8001ed0b8001e2fb900080004f4b8000010b900090004f4b8000cd0b800
0c2fb8000810b8000dd0b8000d2fb8000010b80015d0b800152fba002900
1e0009111239b8000010b8002bd0b8002b2fb8000910b8002ddc00b80000
4558b8002a2f1bb9002a000b3e59b800004558b800232f1bb9002300093e
59b800004558b800192f1bb9001900053e59bb00000001000c00042bb800
2310b900030001f4410500d9000300e9000300025d411b00080003001800
030028000300380003004800030058000300680003007800030088000300
98000300a8000300b8000300c80003000d5db8001910b900120001f4411b
000700120017001200270012003700120047001200570012006700120077
0012008700120097001200a7001200b7001200c70012000d5d410500d600
1200e6001200025db8002a10b900280003f43031012e0123220e0207051c
0107211e0333323637170e0123222e0235343e0233321e020323373301bf
034f49223a2c1a02018401fe7c011a2e3e24354d14332a653a3459402524
4056323754381dce3b645b010e4257192b371e16071009233e2e1b312028
352e25425a35355a4225253f54010c900000>GAAAAA+AvenirNext-Regular AddT42Char 
2 0 181 <00030038fff4022b02c400130027002b01a8b8002c2fb800142f410500da
001400ea001400025d411b00090014001900140029001400390014004900
14005900140069001400790014008900140099001400a9001400b9001400
c90014000d5db900000004f4b8002c10b8000ad0b8000a2fb9001e0004f4
411b0006001e0016001e0026001e0036001e0046001e0056001e0066001e
0076001e0086001e0096001e00a6001e00b6001e00c6001e000d5d410500
d5001e00e5001e00025dba0029000a0000111239ba002b000a0000111239
b8000010b8002ddc00b800004558b8002a2f1bb9002a000b3e59b8000045
58b8000f2f1bb9000f00093e59b800004558b800052f1bb9000500053e59
b8000f10b900190001f4410500d9001900e9001900025d411b0008001900
180019002800190038001900480019005800190068001900780019008800
190098001900a8001900b8001900c80019000d5db8000510b900230001f4
411b00070023001700230027002300370023004700230057002300670023
00770023008700230097002300a7002300b7002300c70023000d5d410500
d6002300e6002300025db8002a10b900280003f4303125140e0223222e02
35343e0233321e0207342e0223220e0215141e0233323e0203233733022b
25425c37365c422525425c36375c422548192e422929412e19192e412929
422e19a03b645bea355a422525425a35355a422525425a352745331e1e33
45272745331d1d3345017190>GAAAAA+AvenirNext-Regular AddT42Char 

1 0 3 <> GAAAAA+AvenirNext-Regular AddT42Char 
1 0 0 <000400000000020002ce000300230027002b0049b8002c2fb8001c2fb800
2c10b80026d0b800262fb900160004f4b8001c10b900250004f4b8002ddc
00bb00030002002400042bbb00250001001900042bbb0004000100010004
2b3031373533152f0134373e01373e0335342623220607273e0133321615
140607060706151711211101112111de3835020d07161110140a042d1f1f
2d0632074a3636461926250606bffe6401cefe00754343751138190d1d11
0f1713110924312c33084841473c20352321131434b80269fd97029cfd32
02ce>GAAAAA+AvenirNext-Regular AddT42Char 
GAAAAA+AvenirNext-Regular /CharStrings get begin
/comma 15 def
/colon 29 def
/A 36 def
/C 38 def
/D 39 def
/F 41 def
/N 49 def
/S 54 def
/T 55 def
/a 68 def
/b 69 def
/c 70 def
/d 71 def
/e 72 def
/g 74 def
/h 75 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/eacute 171 def
/oacute 181 def
/space 3 def
end
GAAAAA+AvenirNext-Regular /Encoding get
dup 44 /comma put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 78 /N put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 142 /eacute put
dup 151 /oacute put
dup 202 /space put
pop
end
%ADOEndSubsetFont
/MTRYBU+AvenirNext-Regular /GAAAAA+AvenirNext-Regular findfont ct_VMDictPut/MTRYBU+AvenirNext-Regular*1 [44{/.notdef}rp /comma 13{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D /.notdef /F 7{/.notdef}rp /N 4{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 24{/.notdef}rp /eacute 8{/.notdef}rp /oacute 50{/.notdef}rp /space 53{/.notdef}rp]MTRYBU+AvenirNext-Regular nfMTRYBU+AvenirNext-Regular*1 [11 0 0 -11 0 0 ]msf36 146.68 mo(Declar)sh68.5931 146.68 mo(aci\227n\312de\312Negaci\227n,)sh166.041 146.68 mo(\312Cancelaci\227n\312o\312Cambio\312de\312Cr\216dito)[2.75 7.72202 5.87396 6.39093 5.5 6.29207 2.77199 5.87396 5.5 2.75 6.72092 6.39093 2.75 6.72092 2.75 7.7209 5.87395 9.71295 7.00696 2.75 6.72089 2.75 7.00696 6.29205 2.75 7.92001 3.76202 6.29205 7.00693 2.75 3.48703 0 ]xsh36 176.68 mo(Fecha:\312)[5.65396 6.29207 5.5 6.41292 5.87396 3.30003 0 ]xsh36 206.68 mo(Nombr)sh71.6069 206.68 mo(e\312del\312Solicitante:\312)sh36 236.68 mo(Dir)sh50.8391 236.68 mo(ecci\227n\312del\312Solicitante:)sh36 266.68 mo(Descripci\227n\312de\312Cuenta,)sh153.743 266.68 mo(\312Transacci\227n\312o\312Solicitud\312de\312Cr\216dito:)[2.48601 5.28008 3.828 5.87396 6.39093 4.884 5.87396 5.5 5.5 2.75 6.72092 6.39091 2.75 6.72092 2.75 6.20395 6.72092 2.77199 2.75 5.5 2.75 3.48701 6.39093 7.00693 2.75 7.00693 6.29205 2.75 7.92004 3.7598 6.29208 7.0069 2.75 3.48703 6.72092 0 ]xsh36 296.68 mo(Descripci\227n\312)sh98.8088 296.68 mo(de\312)sh114.66 296.68 mo(Accion\312)sh151.708 296.68 mo(Tomada:)[5.21408 6.72092 9.71295 5.87396 7.00693 5.87396 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Procedure [/0 ]]
] del_res
/MTRYBU+AvenirNext-Regular*1 uf/MTRYBU+AvenirNext-Regular uf/GAAAAA+AvenirNext-Regular uf/MTRYBT+AvenirNext-DemiBold*1 uf/MTRYBT+AvenirNext-DemiBold uf/FAAAAA+AvenirNext-DemiBold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
